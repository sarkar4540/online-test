{"ast":null,"code":"import*as React from'react';import View from\"react-native-web/dist/exports/View\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import{withTheme}from\"../../core/theming\";import{RadioButtonContext}from\"./RadioButtonGroup\";import{handlePress}from\"./utils\";import TouchableRipple from\"../TouchableRipple/TouchableRipple\";import RadioButton from\"./RadioButton\";import Text from\"../Typography/Text\";var RadioButtonItem=function RadioButtonItem(_ref){var value=_ref.value,label=_ref.label,style=_ref.style,labelStyle=_ref.labelStyle,onPress=_ref.onPress,disabled=_ref.disabled,color=_ref.color,uncheckedColor=_ref.uncheckedColor,status=_ref.status,colors=_ref.theme.colors,accessibilityLabel=_ref.accessibilityLabel,testID=_ref.testID;return React.createElement(RadioButtonContext.Consumer,null,function(context){return React.createElement(TouchableRipple,{onPress:disabled?undefined:function(){return handlePress({onPress:onPress,onValueChange:context===null||context===void 0?void 0:context.onValueChange,value:value});},accessibilityLabel:accessibilityLabel,testID:testID},React.createElement(View,{style:[styles.container,style],pointerEvents:\"none\"},React.createElement(Text,{style:[styles.label,{color:colors.text},labelStyle]},label),React.createElement(RadioButton,{value:value,disabled:disabled,status:status,color:color,uncheckedColor:uncheckedColor})));});};RadioButtonItem.displayName='RadioButton.Item';export default withTheme(RadioButtonItem);export{RadioButtonItem};var styles=StyleSheet.create({container:{flexDirection:'row',alignItems:'center',justifyContent:'space-between',paddingVertical:8,paddingHorizontal:16},label:{fontSize:16}});","map":{"version":3,"sources":["RadioButtonItem.tsx"],"names":["RadioButtonItem","theme","colors","testID","context","disabled","handlePress","onPress","onValueChange","value","styles","color","text","uncheckedColor","withTheme","container","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","label","fontSize"],"mappings":"AAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,C,sHAQA,OAAA,SAAA,0BACA,OAAA,kBAAA,0BACA,OAAA,WAAA,eACA,MAAA,CAAA,eAAA,0CACA,MAAA,CAAA,WAAA,qBACA,MAAA,CAAA,IAAA,0BAkFA,GAAMA,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,UAAC,CAAA,KAAD,MAAC,KAAD,CAAC,KAAD,MAAC,KAAD,CAAC,KAAD,MAAC,KAAD,CAAC,UAAD,MAAC,UAAD,CAAC,OAAD,MAAC,OAAD,CAAC,QAAD,MAAC,QAAD,CAAC,KAAD,MAAC,KAAD,CAAC,cAAD,MAAC,cAAD,CAAC,MAAD,MAAC,MAAD,CAUbE,MAVa,MAUtBD,KAVsB,CAUbC,MAVa,CAAC,kBAAD,MAAC,kBAAD,CAYtBC,MAZsB,MAYtBA,MAZsB,OActB,CAAA,KAAA,CAAA,aAAA,CAAC,kBAAD,CAAA,QAAA,CAAA,IAAA,CACIC,SAAAA,OAAD,CAAsC,CACrC,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,eAAA,CAAA,CACE,OAAO,CACLC,QAAQ,CAAA,SAAA,CAEJ,iBACEC,CAAAA,WAAW,CAAC,CACVC,OAAO,CADG,OAAA,CAEVC,aAAa,CAAEJ,OAAF,GAAA,IAAEA,EAAAA,OAAF,GAAA,IAAA,EAAEA,CAAF,IAAA,EAAEA,CAAAA,OAAO,CAFZ,aAAA,CAGVK,KAAAA,CAAAA,KAHU,CAAD,CADb,EAJR,CAWE,kBAAkB,CAXpB,kBAAA,CAYE,MAAM,CAAEN,MAZV,CAAA,CAcE,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,CAAM,KAAK,CAAE,CAACO,MAAM,CAAP,SAAA,CAAb,KAAa,CAAb,CAAwC,aAAa,CAAC,MAAtD,CAAA,CACE,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,CAAM,KAAK,CAAE,CAACA,MAAM,CAAP,KAAA,CAAe,CAAEC,KAAK,CAAET,MAAM,CAACU,IAAhB,CAAf,CAAA,UAAA,CAAb,CAAA,CADF,KACE,CADF,CAIE,KAAA,CAAA,aAAA,CAAA,WAAA,CAAA,CACE,KAAK,CADP,KAAA,CAEE,QAAQ,CAFV,QAAA,CAGE,MAAM,CAHR,MAAA,CAIE,KAAK,CAJP,KAAA,CAKE,cAAc,CAAEC,cALlB,CAAA,CAJF,CAdF,CADF,CAhBN,CAcE,CAdsB,EAAxB,CAiDAb,eAAe,CAAfA,WAAAA,CAAAA,kBAAAA,CAEA,cAAec,CAAAA,SAAS,CAAxB,eAAwB,CAAxB,CAGA,OAAA,eAAA,EAEA,GAAMJ,CAAAA,MAAM,CAAG,UAAU,CAAV,MAAA,CAAkB,CAC/BK,SAAS,CAAE,CACTC,aAAa,CADJ,KAAA,CAETC,UAAU,CAFD,QAAA,CAGTC,cAAc,CAHL,eAAA,CAITC,eAAe,CAJN,CAAA,CAKTC,iBAAiB,CAAE,EALV,CADoB,CAQ/BC,KAAK,CAAE,CACLC,QAAQ,CAAE,EADL,CARwB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress } from './utils';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport RadioButton from './RadioButton';\nimport Text from '../Typography/Text';\n\nexport type Props = {\n  /**\n   * Value of the radio button.\n   */\n  value: string;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Accessibility label for the touchable. This is read by the screen reader when the user taps the touchable.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * RadioButton.Item allows you to press the whole row (item) instead of only the RadioButton.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/radio-item.ios.png\" />\n *     <figcaption>Pressed</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { RadioButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('first');\n *\n *   return (\n *     <RadioButton.Group onValueChange={value => setValue(value)} value={value}>\n *       <RadioButton.Item label=\"First item\" value=\"first\" />\n *       <RadioButton.Item label=\"Second item\" value=\"second\" />\n *     </RadioButton.Group>\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\nconst RadioButtonItem = ({\n  value,\n  label,\n  style,\n  labelStyle,\n  onPress,\n  disabled,\n  color,\n  uncheckedColor,\n  status,\n  theme: { colors },\n  accessibilityLabel,\n  testID,\n}: Props) => (\n  <RadioButtonContext.Consumer>\n    {(context?: RadioButtonContextType) => {\n      return (\n        <TouchableRipple\n          onPress={\n            disabled\n              ? undefined\n              : () =>\n                  handlePress({\n                    onPress: onPress,\n                    onValueChange: context?.onValueChange,\n                    value,\n                  })\n          }\n          accessibilityLabel={accessibilityLabel}\n          testID={testID}\n        >\n          <View style={[styles.container, style]} pointerEvents=\"none\">\n            <Text style={[styles.label, { color: colors.text }, labelStyle]}>\n              {label}\n            </Text>\n            <RadioButton\n              value={value}\n              disabled={disabled}\n              status={status}\n              color={color}\n              uncheckedColor={uncheckedColor}\n            />\n          </View>\n        </TouchableRipple>\n      );\n    }}\n  </RadioButtonContext.Consumer>\n);\n\nRadioButtonItem.displayName = 'RadioButton.Item';\n\nexport default withTheme(RadioButtonItem);\n\n// @component-docs ignore-next-line\nexport { RadioButtonItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    fontSize: 16,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}